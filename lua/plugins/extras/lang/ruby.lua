return {
  {
    "nvim-treesitter/nvim-treesitter",
    opts = function(_, opts)
      vim.list_extend(opts.ensure_installed, { "ruby", })
    end,
  },
  -- {
  --   "williamboman/mason.nvim",
  --   opts = function(_, opts)
  --     vim.list_extend(opts.ensure_installed, { "solargraph", })
  --   end,
  -- },
  -- {
  --   "neovim/nvim-lspconfig",
  --   opts = {
  --     servers = {
  --       solargraph = {
  --         -- root_dir = require("lspconfig.util").root_pattern(".git", "Gemfile"),
  --         settings = {
  --           solargraph = {
  --             completion = true,
  --             symbols = true,
  --             diagnostics = true,
  --             definitions = true,
  --             hover = true,
  --             references = true,
  --             rename = true,
  --             useBundler = true,
  --           },
  --         },
  --       },
  --     },
  --   },
  -- },
  -- {
  --   "neovim/nvim-lspconfig",
  --   opts = {
  --     servers = {
  --       ruby_ls = {},
  --     },
  --     setup = {
  --       ruby_ls = function (_, opts)
  --         -- textDocument/diagnostic support until 0.10.0 is released
  --         _timers = {}
  --         local function setup_diagnostics(client, buffer)
  --           if require("vim.lsp.diagnostic")._enable then
  --             return
  --           end
  --
  --           local diagnostic_handler = function()
  --             local params = vim.lsp.util.make_text_document_params(buffer)
  --             client.request("textDocument/diagnostic", { textDocument = params }, function(err, result)
  --               if err then
  --                 local err_msg = string.format("diagnostics error - %s", vim.inspect(err))
  --                 vim.lsp.log.error(err_msg)
  --               end
  --               if not result then
  --                 return
  --               end
  --               vim.lsp.diagnostic.on_publish_diagnostics(
  --                 nil,
  --                 vim.tbl_extend("keep", params, { diagnostics = result.items }),
  --                 { client_id = client.id }
  --               )
  --             end)
  --           end
  --
  --           diagnostic_handler() -- to request diagnostics on buffer when first attaching
  --
  --           vim.api.nvim_buf_attach(buffer, false, {
  --             on_lines = function()
  --               if _timers[buffer] then
  --                 vim.fn.timer_stop(_timers[buffer])
  --               end
  --               _timers[buffer] = vim.fn.timer_start(200, diagnostic_handler)
  --             end,
  --             on_detach = function()
  --               if _timers[buffer] then
  --                 vim.fn.timer_stop(_timers[buffer])
  --               end
  --             end,
  --           })
  --         end
  --
  --         require("util").on_attach(function(client, buffer)
  --           if client.name == "ruby_ls" then
  --             setup_diagnostics(client, buffer)
  --           end
  --         end)
  --       end
  --     },
  --   },
  -- },
}
